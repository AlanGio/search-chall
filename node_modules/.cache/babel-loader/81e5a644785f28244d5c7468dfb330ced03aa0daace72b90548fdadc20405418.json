{"ast":null,"code":"import deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, {\n  getSelector,\n  ...parserConfig\n} = {}) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateThemeVars = () => {\n    let vars = {\n      ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(([, {\n      vars: schemeVars\n    }]) => {\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(selector, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof selector === 'string' ? {\n          [selector]: {\n            ...css\n          }\n        } : selector);\n      }\n    }\n    insertStyleSheet(getSelector?.(undefined, {\n      ...rootCss\n    }) || ':root', rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      insertStyleSheet(getSelector?.(colorScheme, {\n        ...css\n      }) || `[${theme.attribute || 'data-color-scheme'}=\"${colorScheme}\"]`, css);\n    }\n    Object.entries(other).forEach(([key, {\n      css\n    }]) => {\n      insertStyleSheet(getSelector?.(key, {\n        ...css\n      }) || `[${theme.attribute || 'data-color-scheme'}=\"${key}\"]`, css);\n    });\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nexport default prepareCssVars;","map":{"version":3,"names":["deepmerge","cssVarsParser","prepareCssVars","theme","getSelector","parserConfig","colorSchemes","components","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","defaultScheme","otherColorSchemes","Object","entries","forEach","key","scheme","generateThemeVars","schemeVars","generateStyleSheets","stylesheets","colorScheme","insertStyleSheet","selector","keys","length","push","undefined","defaultSchemeVal","other","attribute"],"sources":["/Users/alangiojelli/Repos/coding-challenge-search-ui/node_modules/@mui/system/cssVars/prepareCssVars.js"],"sourcesContent":["import deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, {\n  getSelector,\n  ...parserConfig\n} = {}) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateThemeVars = () => {\n    let vars = {\n      ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(([, {\n      vars: schemeVars\n    }]) => {\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(selector, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof selector === 'string' ? {\n          [selector]: {\n            ...css\n          }\n        } : selector);\n      }\n    }\n    insertStyleSheet(getSelector?.(undefined, {\n      ...rootCss\n    }) || ':root', rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      insertStyleSheet(getSelector?.(colorScheme, {\n        ...css\n      }) || `[${theme.attribute || 'data-color-scheme'}=\"${colorScheme}\"]`, css);\n    }\n    Object.entries(other).forEach(([key, {\n      css\n    }]) => {\n      insertStyleSheet(getSelector?.(key, {\n        ...css\n      }) || `[${theme.attribute || 'data-color-scheme'}=\"${key}\"]`, css);\n    });\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nexport default prepareCssVars;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}